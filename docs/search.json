[
  {
    "objectID": "GA.html",
    "href": "GA.html",
    "title": "Genetic Algorithms in R",
    "section": "",
    "text": "GA hay Genetic Algorithm là 1 thuật toán tối ưu hóa ngẫu nhiên (stochastic search algorithms), được phát triển dựa trên lý thuyết tiến hóa và sự chọn lọc tự nhiên của sinh học (Luca Scrucca 2013).\nỞ thời cấp 3, bạn đã từng học về lý thuyết tiến hóa và chọn lọc tự nhiên của Charles Darwin và Alfred Russel ở môn Sinh học. Nếu bạn cũng từng liệt Sinh như tôi thì bạn quên cũng không sao 😅😅. Vậy thì để tôi giải thích lại như sau:\nSự tiến hóa là sự thay đổi đặc điểm di truyền của 1 quần thể sinh vật, ví dụ điển hình chính là từ loại vượn đã tiến hóa thành hình dạng con người văn minh như các bạn bây giờ. Vậy quá trình tiến hóa đó diễn ra khi có sự chọn lọc tự nhiên tạo ra các biến dị di truyền (Ví dụ: đột biến,…) và kết quả là các cá thể đột biến trở nên phổ biến hơn hoặc hiếm gặp hơn trong quần thể. Vậy điều kiện để xảy ra sự chọn lọc tự nhiên có thể là sự thay đổi về môi trường sống, địa lý,… dẫn tới sự khác nhau về khả năng sống sót và sinh sản.\nKết cục là xuất hiện các cá thể đột biến “mạnh mẽ hơn” hoặc đúng là “đặc biệt hơn” có khả năng tồn tại khi xuất hiện sự thay đổi lớn, ví dụ như dưới đây, do sự thay đổi về địa điểm sống, từ một loại chim sẻ đã phát triển thành 3 phân họ khác nhau.\n\n\n\nHình 1: Ví dụ về chọn lọc tự nhiên\n\n\nVậy lí thuyết này liên quan gì tới vấn đề tối ưu hóa. Thông thường khi bạn muốn tối ưu hóa một vấn đề gì đó, bạn cần xây dựng mô hình định lượng nó, ví dụ như dưới ảnh này ta đang có mô hình MILP nhằm hoạch định tuyến đường và tối ưu hóa quãng đường di chuyển.\n\n\n\nHình 2: Mô hình VRP\n\n\nMục tiêu của hàm chính là tìm ra giá trị nhỏ nhất nghĩa là chi phí cho việc di chuyển của xe là nhỏ nhất. Do đó, bạn có thể hình dung rằng giá trị nhỏ nhất đó như là các cá thể đột biến có khả năng sống sót cao nhất trong quẩn thể.\nVì vậy thuật toán Genetic (GA) chính là lặp đi lặp lại sự chọn lọc tự nhiên trong một quần thể hoặc một mẫu để đến cuối cùng tìm ra cá thể vượt trội nhất.\n\n\n\nTrong Machine Learning, GA nhằm tìm ra đúng các biến cần thiết để xây dựng mô hình tốt nhất. Gỉa sử chúng ta có 2 mô hình là:\n\nMô hình 1: gồm các biến A,C,D.\nMô hình 2: gồm biến A,B,E.\n\nVậy mô hình nào mới là tốt nhất cho mô hình dự đoán ? Chúng ta chưa biết được và chỉ có thể so sánh nó thông qua thuật toán Genetic.\nVề quy trình, thuật toán Genetic sẽ có cách hoạt động như dưới đây. Quy trình này mình tham khảo của (Rohith Gandhi 2018).\n\n\n\nHình 3: Thuật toán Genetic\n\n\nDiễn giải cách hoạt động:\n\nBước 1 (Initialisation): mỗi biến được xem là Gene và nhiều Gene gộp lại thành một mô hình hay gọi là Chromosome và nhiều Chromosome sẽ tạo thành một quần thể (Population). Việc này giống như là bạn đang trình bày hết các phương án có thể sử dụng.\n\n\n\n\nHình 4: Các thuật ngữ trong GA\n\n\n\nBước 2 (Fitness Function): Bạn cần xây dựng một hàm mục tiêu để tính toán giá trị cho các mô hình ở bước 1.\nBước 3 (Selection): Biến nào có giá trị yếu kém sẽ bị loại và quá trình tính toán sẽ tiếp tục ở thế hệ của nó tiếp theo. Diễn giải đơn giản hơn là chúng ta thử một cách khác và cố gắng cải thiện kết quả.\nBước 4 (Crossover): Tạo ra mô hình gồm các biến tốt đã lựa chọn ở bước 3. Ví dụ như biến A, B là tốt cho mô hình.\nBước 5 (Mutation): Thay đổi mô hình đầu vào đã bao gồm các biến ở bước 4 và bắt đầu lại từ bước 1. Ví dụ mô hình cần chọn gồm 5 biến và ta đã chọn được biến A,B là tốt. Do đó, khi quay lại bước 1, ta chỉ cần chọn thêm 3 biến thay vì 5 biến như thông thường."
  },
  {
    "objectID": "GA.html#vài-điểm-về-thuật-toán-genetic",
    "href": "GA.html#vài-điểm-về-thuật-toán-genetic",
    "title": "Genetic Algorithms in R",
    "section": "",
    "text": "GA hay Genetic Algorithm là 1 thuật toán tối ưu hóa ngẫu nhiên (stochastic search algorithms), được phát triển dựa trên lý thuyết tiến hóa và sự chọn lọc tự nhiên của sinh học (Luca Scrucca 2013).\nỞ thời cấp 3, bạn đã từng học về lý thuyết tiến hóa và chọn lọc tự nhiên của Charles Darwin và Alfred Russel ở môn Sinh học. Nếu bạn cũng từng liệt Sinh như tôi thì bạn quên cũng không sao 😅😅. Vậy thì để tôi giải thích lại như sau:\nSự tiến hóa là sự thay đổi đặc điểm di truyền của 1 quần thể sinh vật, ví dụ điển hình chính là từ loại vượn đã tiến hóa thành hình dạng con người văn minh như các bạn bây giờ. Vậy quá trình tiến hóa đó diễn ra khi có sự chọn lọc tự nhiên tạo ra các biến dị di truyền (Ví dụ: đột biến,…) và kết quả là các cá thể đột biến trở nên phổ biến hơn hoặc hiếm gặp hơn trong quần thể. Vậy điều kiện để xảy ra sự chọn lọc tự nhiên có thể là sự thay đổi về môi trường sống, địa lý,… dẫn tới sự khác nhau về khả năng sống sót và sinh sản.\nKết cục là xuất hiện các cá thể đột biến “mạnh mẽ hơn” hoặc đúng là “đặc biệt hơn” có khả năng tồn tại khi xuất hiện sự thay đổi lớn, ví dụ như dưới đây, do sự thay đổi về địa điểm sống, từ một loại chim sẻ đã phát triển thành 3 phân họ khác nhau.\n\n\n\nHình 1: Ví dụ về chọn lọc tự nhiên\n\n\nVậy lí thuyết này liên quan gì tới vấn đề tối ưu hóa. Thông thường khi bạn muốn tối ưu hóa một vấn đề gì đó, bạn cần xây dựng mô hình định lượng nó, ví dụ như dưới ảnh này ta đang có mô hình MILP nhằm hoạch định tuyến đường và tối ưu hóa quãng đường di chuyển.\n\n\n\nHình 2: Mô hình VRP\n\n\nMục tiêu của hàm chính là tìm ra giá trị nhỏ nhất nghĩa là chi phí cho việc di chuyển của xe là nhỏ nhất. Do đó, bạn có thể hình dung rằng giá trị nhỏ nhất đó như là các cá thể đột biến có khả năng sống sót cao nhất trong quẩn thể.\nVì vậy thuật toán Genetic (GA) chính là lặp đi lặp lại sự chọn lọc tự nhiên trong một quần thể hoặc một mẫu để đến cuối cùng tìm ra cá thể vượt trội nhất."
  },
  {
    "objectID": "GA.html#cách-hoạt-động-ga-trong-ml",
    "href": "GA.html#cách-hoạt-động-ga-trong-ml",
    "title": "Genetic Algorithms in R",
    "section": "",
    "text": "Trong Machine Learning, GA nhằm tìm ra đúng các biến cần thiết để xây dựng mô hình tốt nhất. Gỉa sử chúng ta có 2 mô hình là:\n\nMô hình 1: gồm các biến A,C,D.\nMô hình 2: gồm biến A,B,E.\n\nVậy mô hình nào mới là tốt nhất cho mô hình dự đoán ? Chúng ta chưa biết được và chỉ có thể so sánh nó thông qua thuật toán Genetic.\nVề quy trình, thuật toán Genetic sẽ có cách hoạt động như dưới đây. Quy trình này mình tham khảo của (Rohith Gandhi 2018).\n\n\n\nHình 3: Thuật toán Genetic\n\n\nDiễn giải cách hoạt động:\n\nBước 1 (Initialisation): mỗi biến được xem là Gene và nhiều Gene gộp lại thành một mô hình hay gọi là Chromosome và nhiều Chromosome sẽ tạo thành một quần thể (Population). Việc này giống như là bạn đang trình bày hết các phương án có thể sử dụng.\n\n\n\n\nHình 4: Các thuật ngữ trong GA\n\n\n\nBước 2 (Fitness Function): Bạn cần xây dựng một hàm mục tiêu để tính toán giá trị cho các mô hình ở bước 1.\nBước 3 (Selection): Biến nào có giá trị yếu kém sẽ bị loại và quá trình tính toán sẽ tiếp tục ở thế hệ của nó tiếp theo. Diễn giải đơn giản hơn là chúng ta thử một cách khác và cố gắng cải thiện kết quả.\nBước 4 (Crossover): Tạo ra mô hình gồm các biến tốt đã lựa chọn ở bước 3. Ví dụ như biến A, B là tốt cho mô hình.\nBước 5 (Mutation): Thay đổi mô hình đầu vào đã bao gồm các biến ở bước 4 và bắt đầu lại từ bước 1. Ví dụ mô hình cần chọn gồm 5 biến và ta đã chọn được biến A,B là tốt. Do đó, khi quay lại bước 1, ta chỉ cần chọn thêm 3 biến thay vì 5 biến như thông thường."
  },
  {
    "objectID": "GA.html#thuật-toán-genetic",
    "href": "GA.html#thuật-toán-genetic",
    "title": "Genetic Algorithms in R",
    "section": "2.1 Thuật toán Genetic:",
    "text": "2.1 Thuật toán Genetic:\nVậy bây giờ chúng ta sẽ xử lí bài toán trên theo thuật toán Genetic\nGỉa sử chúng ta có bài toán về vận chuyển hàng từ nhà kho để thỏa mãn nhu cầu ở các điểm DC (Distribution center). Và công thức để tính toán được chi phí là:\nHàm chi phí tổng thể được xác định như sau:\n\\[\nTC = \\sum_{i=1}^{m} \\left( D_{ij} \\times \\frac{P}{F} \\times 0.4 + LC_i \\right) \\times Q_j\n\\] Vì vậy, nếu trong công việc, chúng ta sẽ cần lấy dữ liệu từ Data warehouse bằng SQL hoặc các phần mềm Business Intelligence khác. Ở đây, nhằm minh họa, mình đã tạo ra code ở phía dưới để các bạn luyện tập.\n\n\nCode\n# Create a data frame for loading costs\nloading_costs &lt;- data.frame(\n  Warehouse = rep(paste(\"WH\", 1:5), each = 4),\n  ID = rep(1:5, times = 4),\n  Weight_Category = rep(c(\"&lt; 2 tons\", \"2 to 5 tons\", \"5 to 10 tons\", \"&gt; 10 tons\"), times = 5),\n  Has_Machine = rep(c(\"Yes\", \"No\", \"Yes\", \"No\", \"No\"), each = 4),\n  Loading_Cost = c(80, 100, 120, 160,  # Warehouse 1 (with machine)\n                   110, 150, 180, 210,  # Warehouse 2 (without machine)\n                   85, 105, 125, 140,  # Warehouse 3 (with machine)\n                   150, 170, 190, 210,  # Warehouse 4 (without machine)\n                   140, 165, 185, 215)   # Warehouse 5 (without machine)\n)\n\n# Set seed for reproducibility\nset.seed(123)\n\n# Define parameters\nweight_categories &lt;- c(\"&lt; 1.5\", \"1.5 to 2.5\", \"2.5 to 5\", \"5 to 10\", \"&gt; 10\")\n# Create the data frame\nloading_costs &lt;- data.frame(\n  Warehouse = rep(1:5, each = 15),  # 5 warehouses, 15 rows each\n  DC = rep(rep(1:3, each = 5), times = 5),  # Repeat 1, 2, 3 for each warehouse\n  Weight_Category = rep(weight_categories, times = 15),  # Repeat categories for 15 rows\n  Loading_Cost = round(runif(75, 5, 150), 2),\n  Has_Machine = sample(c(\"Yes\", \"No\"), 75, replace = TRUE)\n)\n\n# Define warehouses with coordinates (latitude, longitude)\nwarehouses &lt;- data.frame(\n  ID = 1:5,\n  Latitude = c(21.0285, 16.0545, 10.7769, 14.0583, 19.8060), # Example latitudes (Hanoi, HCMC, Da Nang, etc.)\n  Longitude = c(105.804, 108.2022, 106.6957, 108.2772, 105.7460) # Example longitudes\n)\n\n# Define distribution centers data in Vietnam (example coordinates)\ndistribution_centers &lt;- data.frame(\n  ID = 1:3,\n  Demand = c(90, 30, 150),\n  Latitude = c(17.974855, 11.7769, 15.122327), # Example latitudes (Hanoi, Da Nang, HCMC)\n  Longitude = c(102.630867, 106.6957, 108.799357) # Example longitudes\n)\n\n\nNếu bạn gặp khó khăn trong việc phải đối mặt với cả đống dữ liệu từ hệ thống và chưa biết lấy dữ liệu nào để phân tích hoặc gộp bảng nào qua bảng nào thì lời khuyên của tôi là hãy vẽ bảng Entity relation diagram (ERD). Các bạn có thể dễ dàng hình dung các mối quan hệ thông qua bảng Entity relation diagram (ERD) dưới đây:\n\n\n\n\n\nBiểu đồ 1: EDR model\n\n\nERD là một công cụ trực quan dùng để mô tả cấu trúc dữ liệu trong cơ sở dữ liệu. ERD thể hiện các thực thể (entities), thuộc tính (attributes), và các mối quan hệ (relationships) giữa chúng. Các thực thể thường được biểu diễn dưới dạng hình chữ nhật, thuộc tính dưới dạng hình ellips, và mối quan hệ bằng hình thoi hoặc đường nối. ERD giúp lập kế hoạch cho thiết kế cơ sở dữ liệu, đảm bảo rằng các yếu tố dữ liệu và quan hệ giữa chúng được xác định rõ ràng, tạo nền tảng cho việc phát triển và quản lý dữ liệu hiệu quả.\n\n\n\n\n\n\nTải package datamodelr:\n\n\n\nMình tạo biểu đồ này bằng thư viện datamodelr. Bạn có thể tải bằng cú pháp: devtools::install_github(\"bergant/datamodelr\")\n\n\nNhư vậy, dựa vào đó, ta sẽ tính toán được 2 bảng quan trọng:\n\nBảng giá loading ở các kho. (Hình bên trái)\nBảng chi phí vận chuyển từ từng WH đến các DCs. (Hình bên phải)\n\n\n\nCode\n## Calculate the transportation cost:\n# Haversine distance function\nhaversine &lt;- function(lat1, lon1, lat2, lon2) {\n  R &lt;- 6371 # Radius of Earth in kilometers\n  dlat &lt;- (lat2 - lat1) * pi / 180\n  dlon &lt;- (lon2 - lon1) * pi / 180\n  a &lt;- sin(dlat / 2) * sin(dlat / 2) +\n       cos(lat1 * pi / 180) * cos(lat2 * pi / 180) * \n       sin(dlon / 2) * sin(dlon / 2)\n  c &lt;- 2 * atan2(sqrt(a), sqrt(1 - a))\n  R * c # Distance in kilometers\n}\n\n# Calculate distance matrix based on coordinates\ndistance_matrix &lt;- matrix(0, nrow = nrow(warehouses), ncol = nrow(distribution_centers))\n\nfor (i in 1:nrow(warehouses)) {\n  for (j in 1:nrow(distribution_centers)) {\n    distance_matrix[i, j] &lt;- haversine(\n      warehouses$Latitude[i], warehouses$Longitude[i],\n      distribution_centers$Latitude[j], distribution_centers$Longitude[j]\n    )\n  }\n}\n\n# Define the fuel price (example value)\nfuel_price &lt;- 20 # Fuel price per kilometer\n\n# Calculate transportation costs\ntransportation_costs &lt;- distance_matrix * fuel_price * 0.4\n\n## Calculate the loading cost:\nweights_per_good &lt;- 0.1\n\nmean_loading_cost&lt;-loading_costs %&gt;% \n  group_by(DC, Warehouse) %&gt;% \n  summarise(mean = mean(Loading_Cost,na.rm = TRUE)/1000/weights_per_good) %&gt;% # Assumes weighted of goods is 0.1kg \n  ungroup()\n\nlibrary(data.table)\n# Reshape the data frame to a wide format\nmean_cost_matrix &lt;- dcast(mean_loading_cost,\n                          Warehouse ~ DC, \n                          value.var = \"mean\")\n\n# Convert the data frame to a matrix and remove the Warehouse column\nloading_costs_per_dc &lt;- as.matrix(mean_cost_matrix[,-1])\n\n# Set row names as the warehouse names\nrownames(loading_costs_per_dc) &lt;- mean_loading_cost$Warehouse[!duplicated(mean_loading_cost$Warehouse)]\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n      Loading Costs by weight category in each warehouses\n\n    \n    \n      Table just contains expected loading cost\n\n    \n    \n      Warehouse\n      Distribution Center\n      Weight Category\n      Loading Cost (VNĐ)\n      Has Machine\n    \n  \n  \n    WH 2\nDC 2\n5 to 10\n₫149,170\nYes\n    WH 3\nDC 1\n&lt; 1.5\n₫144,640\nNo\n    WH 1\nDC 3\n&lt; 1.5\n₫143,740\nNo\n    WH 2\nDC 1\n&gt; 10\n₫143,400\nNo\n    WH 1\nDC 1\n&gt; 10\n₫141,370\nNo\n    WH 3\nDC 1\n1.5 to 2.5\n₫135,830\nYes\n  \n  \n    \n      Source: package gt in R\n\n    \n  \n  \n\n\n\n\n\nSau khi đã có đủ dữ liệu, bạn sẽ bắt đầu viết hàm mục tiêu và dùng thuật toán GA để tìm ra giá trị tối ưu nhất.\nTrong hàm ga từ gói GA trong R, có một số đối số quan trọng cho phép bạn tùy chỉnh thuật toán di truyền. Dưới đây là một cái nhìn tổng quan về một số đối số quan trọng:\n\ntype: Chỉ định loại tối ưu hóa (ví dụ: \"real-valued\", \"binary\" hoặc \"permutation\").\nfitness: Hàm đánh giá độ phù hợp; nó nên nhận một vector tham số làm đầu vào và trả về một giá trị số.\nlower và upper: Định nghĩa giới hạn cho các biến nếu bạn đang tối ưu hóa trong không gian liên tục (dùng cho các loại giá trị thực).\npopSize: Thiết lập kích thước quần thể cho mỗi thế hệ.\nmaxiter: Chỉ định số thế hệ tối đa để chạy thuật toán.\nrun: Chỉ định số thế hệ để chạy thuật toán mà không có sự cải thiện trước khi dừng lại.\npmutation: Xác suất xảy ra đột biến trong quần thể.\nelitism: Xác định xem các cá thể tốt nhất có nên được giữ lại trong thế hệ tiếp theo hay không.\n\nNhững đối số này giúp điều chỉnh thuật toán di truyền cho các nhu cầu tối ưu hóa cụ thể của bạn, cho phép hiệu suất tốt hơn và hội tụ về các giải pháp tối ưu.\nNgoài ra, còn có các lưu ý cho bạn khi sử dụng R như sau:\n\n\n\n\n\n\nLưu ý khi dùng hàm ga():\n\n\n\nHàm ga() phải có ít nhất 2 đối số là type và fitness thì R mới chạy được.\n\nRiêng khi type = “binary” thì cần thêm đối số nBits.\nCòn khi type = \"real-valued\"/\"permutation\" thì cần thêm đối số min và max.\n\n\n\n\n\nCode\n# Load necessary library\nlibrary(GA)\ndemand&lt;-c(distribution_centers$Demand)\n\n# Define the objective function\nobjective_function &lt;- function(quantities) {\n    quantities_matrix &lt;- matrix(quantities, \n                                nrow = 5, \n                                ncol = 3, \n                                byrow = TRUE)\n    \n    # Calculate total loading costs\n    loading_costs &lt;- rowSums(quantities_matrix) * loading_costs_per_dc  # Total loading costs for each DC\n    # Calculate total transportation costs\n    transportation_costs &lt;- sum(quantities_matrix * transportation_costs)\n    \n    # Combine both costs\n    total_cost &lt;- sum(loading_costs) + transportation_costs\n    \n    # Check if demands are met\n    if (any(colSums(quantities_matrix) &lt; demand)) {\n        return(Inf)  # Penalize if demands are not met\n    }\n    \n    return(total_cost)\n}\n\n# Set up the Genetic Algorithm\nnum_vars &lt;- 5 * 3  # 5 warehouses, 3 distribution centers\nga_result &lt;- ga(\n    type = \"real-valued\",\n    fitness = function(x) -objective_function(x),  # Negate for minimization\n    lower = rep(0, num_vars),  # Minimum quantity\n    upper = rep(100, num_vars),  # Maximum quantity (adjust as needed)\n    popSize = 50,\n    maxiter = 100,\n    run = 10,\n    monitor = TRUE\n)\n\n\nVà cuối cùng, sau khi có kết quả, mình sẽ dùng các thư viện gồm: Leaflet, gt, và biểu đồ Sankey phục vụ những mục đích khác nhau cho trực quan hóa dữ liệu.\n\nLeaflet: Đây là một thư viện mạnh mẽ để tạo bản đồ tương tác. Nó cho phép người dùng dễ dàng thêm các lớp, điểm đánh dấu và pop-up, rất lý tưởng để trực quan hóa dữ liệu địa lý. Leaflet đặc biệt hữu ích để hiển thị các dữ liệu như vị trí, lộ trình, hoặc phân bố không gian.\ngt: Gói gt được thiết kế để tạo ra các bảng chất lượng cao trong R. Nó cho phép người dùng định dạng và tạo kiểu cho bảng một cách dễ dàng, giúp chúng trở nên hấp dẫn và dễ đọc. gt hỗ trợ các tính năng như định dạng tùy chỉnh, dòng tóm tắt, và thậm chí thêm chú thích, nâng cao cách trình bày dữ liệu trong báo cáo.\nBiểu đồ Sankey: Những biểu đồ này được sử dụng để trực quan hóa luồng và mối quan hệ giữa các danh mục khác nhau. Trong R, gói networkD3 hoặc ggalluvial có thể tạo ra biểu đồ Sankey, giúp hiểu cách các giá trị di chuyển giữa các nút, chẳng hạn như theo dõi hành trình người dùng hoặc hiển thị phân bổ tài nguyên.\n\nNhìn chung, những công cụ này cung cấp các lựa chọn mạnh mẽ để trình bày dữ liệu một cách hấp dẫn và thông tin. Bạn có thể lựa chọn 1 trong 3 chúng, vì lý do học nên mình trình bày cả 3 luôn!.\n\n\nCode\n# Assuming ga_result@solution contains optimal quantities\nga_result_solution &lt;- c(ga_result@solution)\n\n# Reshape the solution into a matrix (5 warehouses x 3 DCs)\noptimal_quantities &lt;- matrix(ga_result@solution,\n                             nrow = 5, \n                             ncol = 3, \n                             byrow = TRUE)\n\n# Convert the matrix to a data frame\nweights&lt;-optimal_quantities* weights_per_good\n\nrownames(weights) &lt;- 1:5\ncolnames(weights) &lt;- 1:3\n\nlibrary(reshape2)\nreal_weighted &lt;- melt(weights)\n\n# Rename the columns\ncolnames(real_weighted) &lt;- c(\"Warehouse\", \"DC\", \"Total_Weight\")\n\n# Perform left join\nresult &lt;- real_weighted %&gt;%\n  left_join(loading_costs, by = c(\"Warehouse\", \"DC\"))\n\nresult &lt;-result %&gt;% \n  mutate(Price = case_when(\n    Total_Weight &lt; 1.5 ~ \"&lt; 1.5\",\n    Total_Weight &lt;2.5 ~ \"1.5 to 2.5\",\n    Total_Weight &lt; 5 ~ \"2.5 to 5\",\n    Total_Weight &lt; 10 ~ \"5 to 10\",\n    Total_Weight &gt;= 10 ~ \"&gt; 10\",\n      is.na(Total_Weight) ~ NA_character_  # Handle NA explicitly if needed\n  ))\n  \nresult&lt;-result %&gt;% \n  filter(Weight_Category == Price) %&gt;% \n  select(-Price)\n\n# Join with tranportation cost table:\nrownames(transportation_costs) &lt;- 1:5\ncolnames(transportation_costs) &lt;- 1:3\n\ntransport&lt;-melt(transportation_costs)\n\n# Rename the columns\ncolnames(transport) &lt;- c(\"Warehouse\", \"DC\", \"Transport_cost\")\n\n\nresult&lt;-left_join(result,\n                  transport,\n                  by=c(\"Warehouse\", \"DC\"))\n\n# Adjust:\n\nresult&lt;-result %&gt;% \n      mutate(Loading_Cost = Loading_Cost*1000,\n             Transport_cost = Transport_cost*1000,\n             DC = paste(\"DC\",DC),\n             Warehouse = paste(\"WH\",Warehouse)) \n\n# Reorder cols in table:\nresult&lt;-result[,c(\"Warehouse\",\n                 \"DC\",\n                 \"Has_Machine\",\n                 \"Total_Weight\",\n                 \"Weight_Category\",\n                 \"Loading_Cost\",\n                 \"Transport_cost\")]\n\n\n\n\n\n\n2.1.1 Báo cáo:\nCuối cùng là hiển thị kết quả đã phân tích được.\nĐể kết nối các biểu đồ lại với nhau, ta thường nghĩ Shiny trong R nhưng vì chúng ta đang tạo website bằng Quarto nên output cuối cùng sẽ là một trang web tĩnh - static website. Do đó, nó sẽ không phản hồi với thông tin đầu vào của người dùng hoặc chạy bất kỳ mã R nào. Bạn có thể hình dung giống như bạn đang muốn xem biểu đồ về doanh thu trong tháng tiếp theo trên 1 biểu đồ trong Word - không thể làm được vì nó thuộc dạng văn bản, bạn chỉ đọc hoặc nhìn chứ không tương tác được.\nTuy vậy, sau một thời gian tìm hiểu, mình cũng tìm được cách để nhúng Shiny vào R để hiển thị trên Quarto. Nguồn tài liệu bạn có thể kham khảo ở trang này r-shinylive-demo.\nTóm tắt cho bạn nào lười đọc thì bạn cần đổi chunk từ {r} thành shinylive-r và thêm các tham số như dưới đây.\n```{shinylive-r}\n#| standalone: true\n#| viewHeight: 1000\n```\n#| viewerHeight: 1000\n#| standalone: true\n\n## Prepare data:\n\n# Convert GA solution to a matrix\n# Optimal quantities matrix\noptimal_quantities &lt;- matrix(c(\n  43.306058, 10.87137, 13.26283,\n  15.524054, 30.42748, 48.86716,\n  7.599769, 44.93531, 27.46289,\n  18.556927, 17.60396, 41.85203,\n  16.305016, 13.15498, 21.79634\n), nrow = 5, ncol = 3, byrow = TRUE)\n\n\n# Warehouse data:\nwarehouses &lt;- data.frame(\n  ID = 1:5,\n  Latitude = c(21.0285, 16.0545, 10.7769, 14.0583, 19.8060),\n  Longitude = c(105.8040, 108.2022, 106.6957, 108.2772, 105.7460),\n  District = c(\"Đống Đa\", \"Hải Châu\", \"Quận 1\", \"Mang Yang\", \"Đông Sơn\"),\n  Province = c(\"Hà Nội\", \"Đà Nẵng\", \"Hồ Chí Minh\", \"Gia Lai\", \"Thanh Hóa\"),\n  Address = c(\n    \"2RH3+9HX Đống Đa, Hà Nội, Việt Nam\",\n    \"3632+RV4 Hải Châu, Đà Nẵng, Việt Nam\",\n    \"QMGW+Q74 Quận 1, Hồ Chí Minh, Việt Nam\",\n    \"375G+8VG Mang Yang, Gia Lai, Việt Nam\",\n    \"RP4W+99X Đông Sơn, Thanh Hóa, Việt Nam\"\n  )\n)\n\n# Distribution center data:\ndistribution_centers &lt;- data.frame(\n  ID = 1:3,\n  Latitude = c(17.97486, 11.77690, 15.12233),\n  Longitude = c(102.6309, 106.6957, 108.7994),\n  District = c(\"Viêng Chăn\", \"Lộc Ninh\", \"Quảng Ngãi\"),\n  Province = c(\"Lào\", \"Bình Phước\", \"Quảng Ngãi\"),\n  Address = c(\n    \"XJFJ+W8X Viêng Chăn, Lào\",\n    \"QMGW+Q74 Lộc Ninh, Bình Phước, Việt Nam\",\n    \"4QCX+WPQ Quảng Ngãi, Việt Nam\"\n  )\n)\n\n# Custom icon:\nwarehouse_icon &lt;- makeIcon(\n      iconUrl = \"C:/Users/locca/Documents/Xuân Lộc/R/Project R/Genetic-Algorithm/warehouse_icon.png\",  # Update with your actual file path\n      iconWidth = 30, \n      iconHeight = 30\n    )\n\ndc_icon &lt;- makeIcon(\n      iconUrl = \"C:/Users/locca/Documents/Xuân Lộc/R/Project R/Genetic-Algorithm/distribution_center.png\",  # Update with your actual file path\n      iconWidth = 30, \n      iconHeight = 30\n    )\n\n# Load required libraries\npacman::p_load(leaflet, \n               dplyr, \n               networkD3)\nlibrary(shiny)\nlibrary(bslib)\n\n# Define UI\nui &lt;- fluidPage(\n  titlePanel(\"Warehouse Distribution Dashboard\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      checkboxGroupInput(inputId = \"warehouse\", \n                         label = \"Select Warehouse:\", \n                         choices = paste(\"Warehouse\", 1:5), \n                         selected = paste(\"Warehouse\", 1))\n    ), \n    mainPanel(\n      tabsetPanel(\n        tabPanel(\"Map\", \n                 leafletOutput(\"map\", height = \"400px\")),\n        tabPanel(\"Data & Sankey\",\n                 fluidRow(\n                   column(8, dataTableOutput(\"cost_table\")),\n                   column(4, uiOutput(\"sankey_ui\"))\n                 )\n        )\n      )\n    )\n  )\n)\n\n# Define server logic\nserver &lt;- function(input, output, session) {\n  \n  location &lt;- reactive({\n    req(input$warehouse) \n    as.numeric(sub(\"Warehouse \", \"\", input$warehouse))\n  })\n  \n  # Create the leaflet map\n  output$map &lt;- renderLeaflet({\n    req(location())\n    \n    # Initialize the map\n    map &lt;- leaflet() %&gt;%\n      addTiles() %&gt;%\n      addProviderTiles(providers$CartoDB.Positron) %&gt;%\n      addMarkers(data = warehouses %&gt;% filter(ID %in% location()), \n                 lat = ~Latitude, \n                 lng = ~Longitude, \n                 label = ~paste0(\"&lt;strong&gt; ID Warehouse: &lt;/strong&gt; \", ID, \"&lt;br/&gt; \",\n                                 \"&lt;strong&gt; Province: &lt;/strong&gt; \", Province, \"&lt;br/&gt; \",\n                                 \"&lt;strong&gt; District: &lt;/strong&gt; \", District, \"&lt;br/&gt; \",\n                                 \"&lt;strong&gt; Address: &lt;/strong&gt; \", Address, \"&lt;br/&gt; \") %&gt;% \n                   lapply(htmltools::HTML),\n                 icon = warehouse_icon) %&gt;%\n      addMarkers(data = distribution_centers, \n                 lat = ~Latitude, \n                 lng = ~Longitude, \n                 label = ~paste0(\"&lt;strong&gt; ID Distribution Center: &lt;/strong&gt; \", ID, \"&lt;br/&gt; \",\n                                 \"&lt;strong&gt; Province: &lt;/strong&gt; \", Province, \"&lt;br/&gt; \",\n                                 \"&lt;strong&gt; District: &lt;/strong&gt; \", District, \"&lt;br/&gt; \",\n                                 \"&lt;strong&gt; Address: &lt;/strong&gt; \", Address, \"&lt;br/&gt; \") %&gt;% \n                   lapply(htmltools::HTML),\n                 icon = dc_icon)\n    \n    qty_data &lt;- optimal_quantities[location(), , drop = FALSE]  \n    \n    # Add routes based on the optimal quantities\n    for (i in 1:nrow(qty_data)) {\n      for (j in 1:ncol(qty_data)) {\n        if (qty_data[i, j] &gt; 0) {\n          route_start &lt;- warehouses[warehouses$ID == i, c(\"Longitude\", \"Latitude\")]\n          route_end &lt;- distribution_centers[distribution_centers$ID == j, c(\"Longitude\", \"Latitude\")]\n          \n          map &lt;- map %&gt;%\n            addPolylines(lat = c(route_start$Latitude, route_end$Latitude),\n                         lng = c(route_start$Longitude, route_end$Longitude),\n                         color = \"black\", weight = 2, opacity = 0.5)\n        }\n      }\n    }\n    \n    map  # Return the modified map\n  })\n  \n  # Render the cost table\n  output$cost_table &lt;- renderDataTable({\n    req(location())\n    \n    gt &lt;- result %&gt;% \n      filter(Warehouse %in% paste(\"WH\", location())) %&gt;% \n      select(c(Warehouse, DC, Loading_Cost, Transport_cost))\n    \n    gt\n  })\n  \n  # Render the Sankey diagram\n  output$sankey_ui &lt;- renderUI({\n    req(location())\n    \n    qty_data &lt;- optimal_quantities[location(), , drop = FALSE] \n    req(nrow(qty_data) &gt; 0)  # Ensure there is data to display\n    \n    # Create links data frame\n    links &lt;- data.frame(\n      source = rep(0:(nrow(qty_data) - 1), each = ncol(qty_data)),  \n      target = as.vector(sapply(0:(ncol(qty_data) - 1), \n                                function(j) rep(nrow(qty_data) + j, nrow(qty_data)))),\n      value = as.vector(qty_data)  \n    )\n    \n    # Filter for selected warehouses\n    links &lt;- links %&gt;% filter(source %in% (location() - 1))  \n    \n    # Create nodes data frame\n    nodes &lt;- data.frame(name = c(paste(\"Warehouse\", location()), paste(\"DC\", 1:ncol(qty_data))))\n    \n    # Create the Sankey network\n    sankey &lt;- sankeyNetwork(Links = links, \n                            Nodes = nodes, \n                            Source = \"source\", \n                            Target = \"target\", \n                            Value = \"value\",\n                            NodeID = \"name\",\n                        height = 500,  \n                        width = 400,\n                        fontSize = 12,\n                        nodeWidth = 20,\n                        sinksRight = FALSE) # Change this value to make it thinner\n    \n    # Customize tooltips and add click functionality to show a value panel\nsankey &lt;- htmlwidgets::onRender(sankey, \"\n  function(el, x) {\n    // Create a div for the value panel\n    var valuePanel = d3.select('body').append('div')\n      .attr('class', 'value-panel')\n      .style('position', 'absolute')\n      .style('padding', '8px')\n      .style('background', 'lightgray')\n      .style('border', '1px solid gray')\n      .style('border-radius', '4px')\n      .style('opacity', 0);  // Start hidden\n\n    // Append title for tooltips on hover\n    d3.selectAll('.link')\n      .append('title')\n      .text(function(d) { return d.value; });  // Show value on hover\n\n    // Add click event to show the value panel\n    d3.selectAll('.link')\n      .on('click', function(event, d) {\n        // Ensure we get the correct value\n        var value = d3.select(this).datum().value;\n\n        // Position the value panel near the mouse cursor\n        valuePanel\n          .style('left', (event.pageX + 5) + 'px')\n          .style('top', (event.pageY + 5) + 'px')\n          .style('opacity', 1)  // Make it visible\n          .html('Value: ' + value);  // Set the text to the link value\n\n        // Hide the panel after a delay\n        setTimeout(function() {\n          valuePanel.style('opacity', 0);\n        }, 2000);  // Change the delay as needed\n      });\n  }\n\")\n    \n    ## Add title and caption:\nsankey &lt;- htmlwidgets::appendContent(sankey, htmltools::tags$p(style = \"font-size: 12px; text-align: right;\", \" A wider arrow indicates that a larger quantity is being sent from that warehouse to a distribution center.\"))\n    sankey  # Output the Sankey diagram\n  })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\nBạn có thể thấy với dashboard như vậy, ta có thể xem được nhiều thông tin hơn như:\n\nVị trí cụ thể của từng WH và DC cũng như là các tuyến đường dự kiến bằng các đường thẳng minh họa. (Xem Map tab)\nThông tin về chi phí Loading cost và Transporation cost cũng như lượng hàng cần vận chuyển cho từng nhà kho. (Xem Table and Sankey tab)\n\nBạn có thể xem cho 1 hoặc nhiều nhà kho bằng cách click trên thanh Filter. Ngoài ra, đặc biệt với Sankey chart, bạn cần giữ hoặc click chuột vào tuyến để xem được số lượng hàng.\nTuy rất thích R nhưng mình vẫn không thích xây dựng dashboard bằng R lắm vì quá nặng về code và không hiệu quả về thời gian, nguồn lực. Các tools khác mình ưu tiên hơn như Power BI, Tableau hoặc các BIs mà công ty bạn sử dụng trong công việc hằng ngày."
  },
  {
    "objectID": "GA.html#mô-hình-milp",
    "href": "GA.html#mô-hình-milp",
    "title": "Genetic Algorithms in R",
    "section": "2.2 Mô hình MILP:",
    "text": "2.2 Mô hình MILP:\n\n2.2.1 Giới thiệu sơ lược:\nMILP (Mixed Integer Linear Programming) là một phương pháp tối ưu hóa được sử dụng trong các bài toán lập kế hoạch, phân bổ tài nguyên, và quyết định trong các lĩnh vực như logistics, sản xuất, tài chính, và nhiều lĩnh vực khác. MILP là một phần mở rộng của lập trình tuyến tính (Linear Programming - LP), trong đó có các biến là số nguyên (integer variables) bên cạnh các biến liên tục (continuous variables).\nTrong đó, cấu trúc của một bài toán MILP bao gồm:\n\nHàm mục tiêu: Là một hàm tuyến tính mà bạn muốn tối ưu hóa (tối đa hóa hoặc tối thiểu hóa).\n\\[\n\\text{Maximize or Minimize } Z = c_1x_1 + c_2x_2 + \\ldots + c_nx_n\n\\]\nRàng buộc: Bao gồm các điều kiện tuyến tính mà các biến phải thỏa mãn.\n\\[\na_{11}x_1 + a_{12}x_2 + \\ldots + a_{1n}x_n \\leq b_1\n\\]\n\\[\na_{21}x_1 + a_{22}x_2 + \\ldots + a_{2n}x_n \\leq b_2\n\\]\n… và nhiều ràng buộc khác.\nBiến quyết định: Các biến trong bài toán có thể là:\n\nBiến liên tục: Có thể nhận mọi giá trị thực (ví dụ: số lượng sản phẩm).\nBiến nguyên: Chỉ nhận giá trị nguyên (ví dụ: số lượng xe tải).\nBiến nhị phân: Chỉ nhận giá trị 0 hoặc 1 (ví dụ: có hoặc không sử dụng một nhà máy).\n\n\nỨng dụng của MILP\n\nQuản lý chuỗi cung ứng: Tối ưu hóa việc phân phối hàng hóa từ các kho đến các khách hàng.\nLập kế hoạch sản xuất: Xác định số lượng sản phẩm cần sản xuất để tối đa hóa lợi nhuận hoặc giảm chi phí.\nTối ưu hóa lịch trình: Lập lịch cho nhân viên, máy móc, hoặc tài nguyên để tối ưu hóa hiệu suất.\nQuy hoạch đô thị: Tối ưu hóa việc sử dụng đất và tài nguyên trong quy hoạch thành phố.\n\nTrong R có các thư viện như lpSolve, ompr, và ROI có thể được sử dụng để giải quyết các bài toán MILP.\n\n\n2.2.2 Ví dụ:\nMILP là một công cụ mạnh mẽ cho việc tối ưu hóa trong nhiều lĩnh vực khác nhau. Với khả năng kết hợp giữa các biến liên tục và số nguyên, MILP có thể giải quyết nhiều bài toán phức tạp mà các phương pháp tối ưu hóa khác không thể thực hiện hiệu quả.\nGỉa sử ta có bài toán về vấn đề Transshipment có yêu cầu là tìm ra phương án vận tải tối ưu nhất để vận chuyển hàng hóa từ nhà máy (Factory) thông qua Crossdocking và đến được Distribution Center với mục tiêu là đạt chi phí thấp nhất.\n\n\n\nHình 5: Vấn đề Transshipment\n\n\nVì bài toán này thuộc dạng tuyến tính, phương pháp MILP sẽ làm tốt hơn nhiều so với thuật toán GA bên trên.\n\n\nCode\nlibrary(ompr)\nlibrary(ompr.roi)\nlibrary(ROI.plugin.glpk)\n#Input:\nSupply &lt;-c(200,300,100,150,220)\nDemand &lt;-c(150,100,110,200,180)\nDC&lt;-2\nm&lt;-length(Supply)\nn&lt;-length(Demand)\n\nCost_CD&lt;-read.table(text = \n                    \"CD1 CD2\n                     30 50\n                     23 66\n                     35 14\n                     70 12\n                     65 70\",header = T)\nCost_DC&lt;-read.table(text = \n                      \"DC1 DC2 DC3 DC4 DC5\n                       12 25 22 40 41\n                       65 22 23 12 15\",header = T)\n\n#MILP model from the \nmodel5 &lt;- MIPModel() %&gt;%\n  # Add variable\n  add_variable(x[i, j], i = 1:m, j = 1:DC) %&gt;%\n  add_variable(y[j, k], j = 1:DC, k = 1:n) %&gt;%\n  # minimize the cost of transshipment:\n  set_objective(sum_expr(x[i, j]*Cost_CD[i, j],i = 1:m, j = 1:DC)+ sum_expr(y[j, k]*Cost_DC[j, k], k = 1:n, j = 1:DC),\"min\") %&gt;%\n  add_constraint(sum_expr(y[j, k], j = 1:DC) &gt;= Demand[k], k = 1:n) %&gt;%\n  # The amount of inventory in Crossdocking is smaller than production goods\n  add_constraint(sum_expr(x[i, j], j = 1:DC) &lt;= Supply[i], i = 1:m) %&gt;% \n  # The amount of is bigger than demand in DC\n  add_constraint(sum_expr(x[i, j], i = 1:m) - sum_expr(y[j, k], k = 1:n) &gt;= 0,j = 1:DC) %&gt;%\n  add_constraint(x[i, j] &gt;= 0, j = 1:DC, i = 1:m)%&gt;% \n  add_constraint(y[j, k] &gt;= 0, j = 1:DC, k = 1:n)%&gt;% \n  #Solve the model:\n  solve_model(with_ROI(solver = \"glpk\", verbose = TRUE))\n\n\n\n\n\n\n\n\n\n  \n    \n      Transshipment flows from Manufacturers to Distribution Centers\n\n    \n    \n    \n      Manufacturer\n\n      Distribution Center\n\n      Flow Amount\n\n    \n  \n  \n    Manufacturer 1\nDC 1\n60.00\n    Manufacturer 2\nDC 1\n300.00\n    Manufacturer 1\nDC 2\n130.00\n    Manufacturer 3\nDC 2\n100.00\n    Manufacturer 4\nDC 2\n150.00\n  \n  \n  \n\n\n\n\n\n\n\n\n\n\nNhư vậy, chúng ta đã được biết sơ lược về thuật toán Genetic và mô hình MILP cũng như cách thực hiện trong Rstudio.\nNếu bạn có câu hỏi hay thắc mắc nào, đừng ngần ngại liên hệ với mình qua Gmail. Bên cạnh đó, nếu bạn muốn xem lại các bài viết trước đây của mình, hãy nhấn vào hai nút dưới đây để truy cập trang Rpubs hoặc mã nguồn trên Github. Rất vui được đồng hành cùng bạn, hẹn gặp lại! 😄😄😄\n\n\n\n    \n    \n    Contact Me\n    \n    \n    \n\n\n    \n        Contact Me\n        \n            Your Email:\n            \n            Please enter a valid email address.\n            Send Email\n        \n        \n            \n                \n                     View Code on GitHub\n                \n            \n        \n        \n            \n                \n                     Visit my RPubs"
  }
]